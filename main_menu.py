# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_menu.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from pathlib import Path
from tools import HBB_to_txt
from tools import OBB_to_txt
import subprocess
import random
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 596)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 0, 791, 551))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.information_widget = QtWidgets.QWidget(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.information_widget.sizePolicy().hasHeightForWidth())
        self.information_widget.setSizePolicy(sizePolicy)
        self.information_widget.setObjectName("information_widget")
        self.title_label = QtWidgets.QLabel(self.information_widget)
        self.title_label.setGeometry(QtCore.QRect(30, 20, 291, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.information_textBrowser = QtWidgets.QTextBrowser(self.information_widget)
        self.information_textBrowser.setGeometry(QtCore.QRect(380, 0, 411, 101))
        self.information_textBrowser.setObjectName("information_textBrowser")
        self.maker_label = QtWidgets.QLabel(self.information_widget)
        self.maker_label.setGeometry(QtCore.QRect(250, 70, 81, 16))
        self.maker_label.setObjectName("maker_label")
        self.verticalLayout.addWidget(self.information_widget)
        self.workspace_frame = QtWidgets.QFrame(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.workspace_frame.sizePolicy().hasHeightForWidth())
        self.workspace_frame.setSizePolicy(sizePolicy)
        self.workspace_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.workspace_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.workspace_frame.setObjectName("workspace_frame")
        self.workspace_label = QtWidgets.QLabel(self.workspace_frame)
        self.workspace_label.setGeometry(QtCore.QRect(20, 20, 61, 16))
        self.workspace_label.setObjectName("workspace_label")
        self.workspace_textEdit = QtWidgets.QTextEdit(self.workspace_frame)
        self.workspace_textEdit.setGeometry(QtCore.QRect(90, 10, 281, 31))
        self.workspace_textEdit.setMouseTracking(True)
        self.workspace_textEdit.setAcceptDrops(True)
        self.workspace_textEdit.setAcceptRichText(True)
        self.workspace_textEdit.setObjectName("workspace_textEdit")
        self.browse_pushButton = QtWidgets.QPushButton(self.workspace_frame)
        self.browse_pushButton.setGeometry(QtCore.QRect(380, 10, 41, 31))
        self.browse_pushButton.setObjectName("browse_pushButton")
        self.browse_pushButton.clicked.connect(self.browse_workspace_directory_function)
        self.subfolder_create_pushButton = QtWidgets.QPushButton(self.workspace_frame)
        self.subfolder_create_pushButton.setGeometry(QtCore.QRect(20, 60, 131, 21))
        self.subfolder_create_pushButton.setObjectName("subfolder_create_pushButton")
        self.subfolder_create_pushButton.clicked.connect(self.subfolder_create_function)
        self.yaml_create_pushButton = QtWidgets.QPushButton(self.workspace_frame)
        self.yaml_create_pushButton.setGeometry(QtCore.QRect(160, 60, 111, 21))
        self.yaml_create_pushButton.setObjectName("yaml_create_pushButton")
        self.yaml_create_pushButton.clicked.connect(self.yaml_create_function)
        self.ramdom_classify_pushButton = QtWidgets.QPushButton(self.workspace_frame)
        self.ramdom_classify_pushButton.setGeometry(QtCore.QRect(280, 60, 141, 21))
        self.ramdom_classify_pushButton.setObjectName("ramdom_classify_pushButton")
        self.ramdom_classify_pushButton.clicked.connect(self.ramdom_classify_function)
        self.workspace_setting_tabWidget = QtWidgets.QTabWidget(self.workspace_frame)
        self.workspace_setting_tabWidget.setGeometry(QtCore.QRect(430, 10, 331, 81))
        self.workspace_setting_tabWidget.setObjectName("workspace_setting_tabWidget")
        self.target_adding_tab = QtWidgets.QWidget()
        self.target_adding_tab.setObjectName("target_adding_tab")
        self.target_adding_textEdit = QtWidgets.QTextEdit(self.target_adding_tab)
        self.target_adding_textEdit.setGeometry(QtCore.QRect(0, 0, 321, 61))
        self.target_adding_textEdit.setObjectName("target_adding_textEdit")
        self.workspace_setting_tabWidget.addTab(self.target_adding_tab, "")
        self.ramdom_classify_tab = QtWidgets.QWidget()
        self.ramdom_classify_tab.setObjectName("ramdom_classify_tab")
        self.classify_train_label = QtWidgets.QLabel(self.ramdom_classify_tab)
        self.classify_train_label.setGeometry(QtCore.QRect(30, 20, 31, 16))
        self.classify_train_label.setObjectName("classify_train_label")
        self.classify_train_spinBox = QtWidgets.QSpinBox(self.ramdom_classify_tab)
        self.classify_train_spinBox.setGeometry(QtCore.QRect(70, 10, 41, 31))
        self.classify_train_spinBox.setProperty("value", 70)
        self.classify_train_spinBox.setObjectName("classify_train_spinBox")
        self.classify_val_label = QtWidgets.QLabel(self.ramdom_classify_tab)
        self.classify_val_label.setGeometry(QtCore.QRect(140, 20, 21, 16))
        self.classify_val_label.setObjectName("classify_val_label")
        self.classify_val_spinBox = QtWidgets.QSpinBox(self.ramdom_classify_tab)
        self.classify_val_spinBox.setGeometry(QtCore.QRect(170, 10, 41, 31))
        self.classify_val_spinBox.setProperty("value", 25)
        self.classify_val_spinBox.setObjectName("classify_val_spinBox")
        self.classify_test_label = QtWidgets.QLabel(self.ramdom_classify_tab)
        self.classify_test_label.setGeometry(QtCore.QRect(230, 20, 31, 16))
        self.classify_test_label.setObjectName("classify_test_label")
        self.classify_test_spinBox = QtWidgets.QSpinBox(self.ramdom_classify_tab)
        self.classify_test_spinBox.setGeometry(QtCore.QRect(270, 10, 41, 31))
        self.classify_test_spinBox.setProperty("value", 5)
        self.classify_test_spinBox.setObjectName("classify_test_spinBox")
        self.workspace_setting_tabWidget.addTab(self.ramdom_classify_tab, "")
        self.verticalLayout.addWidget(self.workspace_frame)
        self.convert_frame = QtWidgets.QFrame(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.convert_frame.sizePolicy().hasHeightForWidth())
        self.convert_frame.setSizePolicy(sizePolicy)
        self.convert_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.convert_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.convert_frame.setObjectName("convert_frame")
        self.xml_to_txt_label = QtWidgets.QLabel(self.convert_frame)
        self.xml_to_txt_label.setGeometry(QtCore.QRect(10, 20, 71, 16))
        self.xml_to_txt_label.setObjectName("xml_to_txt_label")
        self.conver_examine_label = QtWidgets.QLabel(self.convert_frame)
        self.conver_examine_label.setGeometry(QtCore.QRect(20, 60, 61, 20))
        self.conver_examine_label.setObjectName("conver_examine_label")
        self.HBB_to_txt_pushButton = QtWidgets.QPushButton(self.convert_frame)
        self.HBB_to_txt_pushButton.setGeometry(QtCore.QRect(170, 20, 131, 21))
        self.HBB_to_txt_pushButton.setObjectName("HBB_to_txt_pushButton")
        self.HBB_to_txt_pushButton.clicked.connect(self.HBB_to_txt_function)
        self.OBB_to_txt_pushButton = QtWidgets.QPushButton(self.convert_frame)
        self.OBB_to_txt_pushButton.setGeometry(QtCore.QRect(430, 20, 131, 21))
        self.OBB_to_txt_pushButton.setObjectName("OBB_to_txt_pushButton")
        self.OBB_to_txt_pushButton.clicked.connect(self.OBB_to_txt_function)
        self.HBB_convert_examine_pushButton = QtWidgets.QPushButton(self.convert_frame)
        self.HBB_convert_examine_pushButton.setGeometry(QtCore.QRect(170, 60, 131, 21))
        self.HBB_convert_examine_pushButton.setObjectName("HBB_convert_examine_pushButton")
        self.OBB_convert_examine_pushButton = QtWidgets.QPushButton(self.convert_frame)
        self.OBB_convert_examine_pushButton.setGeometry(QtCore.QRect(430, 60, 131, 21))
        self.OBB_convert_examine_pushButton.setObjectName("OBB_convert_examine_pushButton")
        self.verticalLayout.addWidget(self.convert_frame)
        self.progress_frame = QtWidgets.QFrame(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progress_frame.sizePolicy().hasHeightForWidth())
        self.progress_frame.setSizePolicy(sizePolicy)
        self.progress_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.progress_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.progress_frame.setObjectName("progress_frame")
        self.progress_label = QtWidgets.QLabel(self.progress_frame)
        self.progress_label.setGeometry(QtCore.QRect(40, 70, 54, 12))
        self.progress_label.setObjectName("progress_label")
        self.progressBar = QtWidgets.QProgressBar(self.progress_frame)
        self.progressBar.setGeometry(QtCore.QRect(110, 60, 611, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.task_onrunning_label = QtWidgets.QLabel(self.progress_frame)
        self.task_onrunning_label.setGeometry(QtCore.QRect(20, 20, 91, 21))
        self.task_onrunning_label.setObjectName("task_onrunning_label")
        self.task_onrunning_textBrowser = QtWidgets.QTextBrowser(self.progress_frame)
        self.task_onrunning_textBrowser.setGeometry(QtCore.QRect(110, 20, 581, 31))
        self.task_onrunning_textBrowser.setObjectName("task_onrunning_textBrowser")
        self.verticalLayout.addWidget(self.progress_frame)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.yolo_train_frame = QtWidgets.QFrame(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.yolo_train_frame.sizePolicy().hasHeightForWidth())
        self.yolo_train_frame.setSizePolicy(sizePolicy)
        self.yolo_train_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.yolo_train_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.yolo_train_frame.setObjectName("yolo_train_frame")
        self.yolo_train_start_pushButton = QtWidgets.QPushButton(self.yolo_train_frame)
        self.yolo_train_start_pushButton.setGeometry(QtCore.QRect(20, 60, 341, 31))
        self.yolo_train_start_pushButton.setObjectName("yolo_train_start_pushButton")
        self.yolo_train_start_pushButton.clicked.connect(self.yolo_train_start_function)
        self.yolo_train_basic_setting_pushButton = QtWidgets.QPushButton(self.yolo_train_frame)
        self.yolo_train_basic_setting_pushButton.setGeometry(QtCore.QRect(20, 20, 151, 21))
        self.yolo_train_basic_setting_pushButton.setObjectName("yolo_train_basic_setting_pushButton")
        self.yolo_train_command_setting_pushButton = QtWidgets.QPushButton(self.yolo_train_frame)
        self.yolo_train_command_setting_pushButton.setGeometry(QtCore.QRect(190, 20, 171, 21))
        self.yolo_train_command_setting_pushButton.setObjectName("yolo_train_command_setting_pushButton")
        self.horizontalLayout.addWidget(self.yolo_train_frame)
        self.yolo_test_frame = QtWidgets.QFrame(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.yolo_test_frame.sizePolicy().hasHeightForWidth())
        self.yolo_test_frame.setSizePolicy(sizePolicy)
        self.yolo_test_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.yolo_test_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.yolo_test_frame.setObjectName("yolo_test_frame")
        self.yolo_test_start_pushButton = QtWidgets.QPushButton(self.yolo_test_frame)
        self.yolo_test_start_pushButton.setGeometry(QtCore.QRect(30, 60, 341, 31))
        self.yolo_test_start_pushButton.setObjectName("yolo_test_start_pushButton")
        self.horizontalLayout.addWidget(self.yolo_test_frame)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionEnglish = QtWidgets.QAction(MainWindow)
        self.actionEnglish.setObjectName("actionEnglish")
        self.actionChinese = QtWidgets.QAction(MainWindow)
        self.actionChinese.setObjectName("actionChinese")
        self.menu.addAction(self.actionEnglish)
        self.menu.addAction(self.actionChinese)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        self.workspace_setting_tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "yolo快速训练集成工具"))
        self.title_label.setText(_translate("MainWindow", "yolo快速训练集成工具"))
        self.maker_label.setText(_translate("MainWindow", "——by:rinst"))
        self.workspace_label.setText(_translate("MainWindow", "设定工作区"))
        self.browse_pushButton.setText(_translate("MainWindow", "浏览"))
        self.subfolder_create_pushButton.setText(_translate("MainWindow", "创建工作区下子文件夹"))
        self.yaml_create_pushButton.setText(_translate("MainWindow", "创建A.yaml文件"))
        self.ramdom_classify_pushButton.setText(_translate("MainWindow", "将图片进行随机分类"))
        self.workspace_setting_tabWidget.setTabText(self.workspace_setting_tabWidget.indexOf(self.target_adding_tab), _translate("MainWindow", "添加标注名"))
        self.classify_train_label.setText(_translate("MainWindow", "train"))
        self.classify_val_label.setText(_translate("MainWindow", "val"))
        self.classify_test_label.setText(_translate("MainWindow", "test"))
        self.workspace_setting_tabWidget.setTabText(self.workspace_setting_tabWidget.indexOf(self.ramdom_classify_tab), _translate("MainWindow", "设置图片分配比"))
        self.xml_to_txt_label.setText(_translate("MainWindow", "xml转txt文件"))
        self.conver_examine_label.setText(_translate("MainWindow", "转换检验"))
        self.HBB_to_txt_pushButton.setText(_translate("MainWindow", "HBB to txt"))
        self.OBB_to_txt_pushButton.setText(_translate("MainWindow", "OBB to txt"))
        self.HBB_convert_examine_pushButton.setText(_translate("MainWindow", "HBB convert examine"))
        self.OBB_convert_examine_pushButton.setText(_translate("MainWindow", "OBB convert examine"))
        self.progress_label.setText(_translate("MainWindow", "进展"))
        self.task_onrunning_label.setText(_translate("MainWindow", "当前处理任务："))
        self.yolo_train_start_pushButton.setText(_translate("MainWindow", "启动yolo训练"))
        self.yolo_train_basic_setting_pushButton.setText(_translate("MainWindow", "yolo训练基本设置"))
        self.yolo_train_command_setting_pushButton.setText(_translate("MainWindow", "yolo训练命令高级设置"))
        self.yolo_test_start_pushButton.setText(_translate("MainWindow", "启动yolo训练成果检验"))
        self.menu.setTitle(_translate("MainWindow", "language"))
        self.actionEnglish.setText(_translate("MainWindow", "English"))
        self.actionChinese.setText(_translate("MainWindow", "中文"))

    def browse_workspace_directory_function(self):
        """浏览并选择工作目录"""
        # 弹出目录选择对话框
        directory = QFileDialog.getExistingDirectory(
            None,  # 父窗口
            "选择工作目录",  # 对话框标题
            "",  # 默认起始目录（空字符串表示当前目录）
            QFileDialog.ShowDirsOnly  # 只显示目录
        )
        
        # 如果用户选择了目录（没有点击取消）
        if directory:
            # 将选择的目录路径设置到文本编辑框中
            self.workspace_textEdit.setPlainText(directory)
            self.information_textBrowser.insertPlainText(f"成功设置工作目录:{directory}\n")

    def subfolder_create_function(self):
        if self.workspace_textEdit.toPlainText():
            if os.path.exists(self.workspace_textEdit.toPlainText()):
                os.makedirs(self.workspace_textEdit.toPlainText()+"/train/images")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/train/labels")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/train/labels_xml")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/val/images")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/val/labels")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/val/labels_xml")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/test/images")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/test/labels")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/test/labels_xml")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/images")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/labels")
                os.makedirs(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/labels_xml")
                self.information_textBrowser.insertPlainText(f"成功创建子文件夹\n")
            else:
                self.information_textBrowser.insertPlainText(f"无效的工作目录\n")
        else:
            self.information_textBrowser.insertPlainText(f"在创建子文件夹前请先选择工作目录\n")

    def yaml_create_function(self):
        if self.workspace_textEdit.toPlainText():
            if os.path.exists(self.workspace_textEdit.toPlainText()):
                if self.target_adding_textEdit.toPlainText():
                    names="','".join(list(str(self.target_adding_textEdit.toPlainText()).splitlines()))
                    yaml_content=[
                        f"path: {self.workspace_textEdit.toPlainText()}",
                        f"train: train/images",
                        f"val: val/images",
                        f"nc: {len(str(self.target_adding_textEdit.toPlainText()).splitlines())}",
                        f"names: ['{names}']"
                    ]
                    with open(self.workspace_textEdit.toPlainText()+"/dataset.yaml", 'w', encoding='utf-8') as file:
                        file.write('\n'.join(yaml_content))
                    self.information_textBrowser.insertPlainText(f"yaml文件创建成功\n")
                else:
                    self.information_textBrowser.insertPlainText(f"在创建yaml配置文件前,你需要先添加标注名,用回车隔开\n")
            else:
                self.information_textBrowser.insertPlainText(f"无效的工作目录\n")
        else:
            self.information_textBrowser.insertPlainText(f"在创建yaml文件前请先选择工作目录\n")


    def ramdom_classify_function(self):
        # 支持的图片扩展名
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp'}

        rand_value_1 = int(self.classify_train_spinBox.text())
        rand_value_2 = int(self.classify_val_spinBox.text())
        rand_value_3 = int(self.classify_test_spinBox.text())
        
        if(rand_value_1 + rand_value_2 + rand_value_3 != 100):
            self.information_textBrowser.insertPlainText(f"无效的随机分配概率值,三个值的和不为100\n")
            return

        divide_line_1 = rand_value_1/100
        divide_line_2 = (rand_value_1+rand_value_2)/100

        if os.path.exists(self.workspace_textEdit.toPlainText()):
            if os.path.exists(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify"):
                for image_file in os.listdir(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/images"):

                    image_file_suffix = Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").suffix
                    image_file_name = image_file[:-len(image_file_suffix)]

                    if(image_file_suffix in image_extensions):

                        if(random.random()<=divide_line_1):
                            Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").rename(
                                self.workspace_textEdit.toPlainText()+f"/train/images/{image_file}")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt").rename(
                                    self.workspace_textEdit.toPlainText()+f"/train/labels/{image_file_name}.txt")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml").rename(
                                    self.workspace_textEdit.toPlainText()+f"/train/labels_xml/{image_file_name}.xml")
                                
                        elif(random.random()<=divide_line_2):
                            Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").rename(
                                self.workspace_textEdit.toPlainText()+f"/val/images/{image_file}")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt").rename(
                                    self.workspace_textEdit.toPlainText()+f"/val/labels/{image_file_name}.txt")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml").rename(
                                    self.workspace_textEdit.toPlainText()+f"/val/labels_xml/{image_file_name}.xml")

                        else:
                            Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").rename(
                                self.workspace_textEdit.toPlainText()+f"/test/images/{image_file}")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt").rename(
                                    self.workspace_textEdit.toPlainText()+f"/test/labels/{image_file_name}.txt")
                            if os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml"):
                                Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml").rename(
                                    self.workspace_textEdit.toPlainText()+f"/test/labels_xml/{image_file_name}.xml")
            else:
                self.information_textBrowser.insertPlainText(f"未检测到子文件夹\n")
                return
        else:
            self.information_textBrowser.insertPlainText(f"无效的工作目录\n")
            return
        
        self.information_textBrowser.insertPlainText(f"文件随机分配命令执行完成\n")

    def HBB_to_txt_function(self):
        # 支持的图片扩展名
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp'}

        if os.path.exists(self.workspace_textEdit.toPlainText()):
            if self.target_adding_textEdit.toPlainText():
                
                for image_file in os.listdir(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/images"):
                    image_file_suffix = Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").suffix
                    image_file_name = image_file[:-len(image_file_suffix)]

                    if(image_file_suffix in image_extensions):
                        if(os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml")):
                            HBB_to_txt.function(xml_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml",
                                    txt_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt",
                                    classnames=list(str(self.target_adding_textEdit.toPlainText()).splitlines()))
                        elif(not os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt")):
                            HBB_to_txt.function(xml_path=None,
                                    txt_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt",
                                    classnames=list(str(self.target_adding_textEdit.toPlainText()).splitlines()))
                self.information_textBrowser.insertPlainText(f"HBB_to_txt命令执行完成\n")
            else:
                self.information_textBrowser.insertPlainText(f"在创建txt文件前,你需要先添加标注名,用回车隔开\n")
        else:
            self.information_textBrowser.insertPlainText(f"无效的工作目录\n")

    def OBB_to_txt_function(self):
        # 支持的图片扩展名
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp'}

        if os.path.exists(self.workspace_textEdit.toPlainText()):
            if self.target_adding_textEdit.toPlainText():
                
                for image_file in os.listdir(self.workspace_textEdit.toPlainText()+"/files_waiting_for_classify/images"):
                    image_file_suffix = Path(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/images/{image_file}").suffix
                    image_file_name = image_file[:-len(image_file_suffix)]

                    if(image_file_suffix in image_extensions):

                        if(os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml")):
                            OBB_to_txt.function(xml_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels_xml/{image_file_name}.xml",
                                    txt_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt",
                                    classnames=list(str(self.target_adding_textEdit.toPlainText()).splitlines()))
                        elif(not os.path.exists(self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt")):
                            OBB_to_txt.function(xml_path=None,
                                    txt_path=self.workspace_textEdit.toPlainText()+f"/files_waiting_for_classify/labels/{image_file_name}.txt",
                                    classnames=list(str(self.target_adding_textEdit.toPlainText()).splitlines()))
                
                self.information_textBrowser.insertPlainText(f"OBB_to_txt命令执行完成\n")
            else:
                self.information_textBrowser.insertPlainText(f"在创建txt文件前,你需要先添加标注名,用回车隔开\n")
        else:
            self.information_textBrowser.insertPlainText(f"无效的工作目录\n")

    def yolo_train_start_function(self):
        # YOLO 训练命令
        cmd = f"yolo train model=yolov8n.pt data={self.workspace_textEdit.toPlainText()}/dataset.yaml epochs=50"

        # 执行命令
        subprocess.run(cmd, shell=True)


if __name__ == "__main__":
    import sys
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
